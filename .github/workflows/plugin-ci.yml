name: Jetbrains Plugin

on:
  push:
    paths:
      - 'intelij-plugin/**'
    branches: [main]
  pull_request:
    paths:
      - 'intelij-plugin/**'
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        default: 'development'
        options:
          - development
          - staging
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: intelij-plugin
      - name: Build with Gradle
        run: ./gradlew buildPlugin
        working-directory: intelij-plugin
        env:
          BAID_CLIENT_ID: ${{ secrets.BAID_CLIENT_ID }}
          BAID_REDIRECT_URI: ${{ secrets.BAID_REDIRECT_URI }}
          BAID_AUTH_ENDPOINT: ${{ secrets.BAID_AUTH_ENDPOINT }}
          BAID_SCOPE: ${{ secrets.BAID_SCOPE }}
          BAID_ACCESS_TYPE: ${{ secrets.BAID_ACCESS_TYPE }}
          BAID_PROMPT: ${{ secrets.BAID_PROMPT }}
          BAID_BACKEND_URL: ${{ secrets.BAID_BACKEND_URL }}
          BAID_API_ENDPOINT: ${{ secrets.BAID_API_ENDPOINT }}
          BAID_BACKEND_TOKEN_KEY: ${{ secrets.BAID_BACKEND_TOKEN_KEY }}
          BAID_TOKEN_EXPIRY_KEY: ${{ secrets.BAID_TOKEN_EXPIRY_KEY }}
      - name: Upload plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package
          path: intelij-plugin/build/distributions/*.zip
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: intelij-plugin
      - name: Run tests
        run: ./gradlew test
        working-directory: intelij-plugin
        env:
          BAID_CLIENT_ID: ${{ secrets.BAID_CLIENT_ID }}
          BAID_REDIRECT_URI: ${{ secrets.BAID_REDIRECT_URI }}
          BAID_AUTH_ENDPOINT: ${{ secrets.BAID_AUTH_ENDPOINT }}
          BAID_SCOPE: ${{ secrets.BAID_SCOPE }}
          BAID_ACCESS_TYPE: ${{ secrets.BAID_ACCESS_TYPE }}
          BAID_PROMPT: ${{ secrets.BAID_PROMPT }}
          BAID_BACKEND_URL: ${{ secrets.BAID_BACKEND_URL }}
          BAID_API_ENDPOINT: ${{ secrets.BAID_API_ENDPOINT }}
          BAID_BACKEND_TOKEN_KEY: ${{ secrets.BAID_BACKEND_TOKEN_KEY }}
          BAID_TOKEN_EXPIRY_KEY: ${{ secrets.BAID_TOKEN_EXPIRY_KEY }}

  verify:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: intelij-plugin
      - name: Verify plugin
        run: ./gradlew verifyPlugin
        working-directory: intelij-plugin
        env:
          BAID_CLIENT_ID: ${{ secrets.BAID_CLIENT_ID }}
          BAID_REDIRECT_URI: ${{ secrets.BAID_REDIRECT_URI }}
          BAID_AUTH_ENDPOINT: ${{ secrets.BAID_AUTH_ENDPOINT }}
          BAID_SCOPE: ${{ secrets.BAID_SCOPE }}
          BAID_ACCESS_TYPE: ${{ secrets.BAID_ACCESS_TYPE }}
          BAID_PROMPT: ${{ secrets.BAID_PROMPT }}
          BAID_BACKEND_URL: ${{ secrets.BAID_BACKEND_URL }}
          BAID_API_ENDPOINT: ${{ secrets.BAID_API_ENDPOINT }}
          BAID_BACKEND_TOKEN_KEY: ${{ secrets.BAID_BACKEND_TOKEN_KEY }}
          BAID_TOKEN_EXPIRY_KEY: ${{ secrets.BAID_TOKEN_EXPIRY_KEY }}

  publish:
    runs-on: ubuntu-latest
    needs: verify
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'development' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: intelij-plugin
      - name: Download plugin artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-package
          path: intelij-plugin/build/distributions/
      - name: Set environment-specific configurations
        run: |
          if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
            echo "BAID_BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> $GITHUB_ENV
            echo "BAID_REDIRECT_URI=${{ secrets.STAGING_REDIRECT_URI }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "BAID_BACKEND_URL=${{ secrets.PROD_BACKEND_URL }}" >> $GITHUB_ENV
            echo "BAID_REDIRECT_URI=${{ secrets.PROD_REDIRECT_URI }}" >> $GITHUB_ENV
          fi
      - name: Publish to JetBrains Marketplace
        run: ./gradlew publishPlugin
        working-directory: intelij-plugin
        env:
          INTELLIJ_PUBLISH_TOKEN: ${{ secrets.INTELLIJ_PUBLISH_TOKEN }}
          INTELLIJ_PUBLISH_CHANNEL: ${{ github.event.inputs.environment == 'production' && 'default' || 'beta' }}
          VERSION: ${{ github.event.inputs.version }}
          BAID_CLIENT_ID: ${{ secrets.BAID_CLIENT_ID }}
          BAID_REDIRECT_URI: ${{ env.BAID_REDIRECT_URI || secrets.BAID_REDIRECT_URI }}
          BAID_AUTH_ENDPOINT: ${{ secrets.BAID_AUTH_ENDPOINT }}
          BAID_SCOPE: ${{ secrets.BAID_SCOPE }}
          BAID_ACCESS_TYPE: ${{ secrets.BAID_ACCESS_TYPE }}
          BAID_PROMPT: ${{ secrets.BAID_PROMPT }}
          BAID_BACKEND_URL: ${{ env.BAID_BACKEND_URL || secrets.BAID_BACKEND_URL }}
          BAID_API_ENDPOINT: ${{ secrets.BAID_API_ENDPOINT }}
          BAID_BACKEND_TOKEN_KEY: ${{ secrets.BAID_BACKEND_TOKEN_KEY }}
          BAID_TOKEN_EXPIRY_KEY: ${{ secrets.BAID_TOKEN_EXPIRY_KEY }}