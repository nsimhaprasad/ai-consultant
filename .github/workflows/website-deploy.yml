name: "Website Deploy"

on:
  push:
    paths:
      - 'website/**'
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    env:
      PROJECT_ID: ai-consultant-458311
      REGION: us-central1
      REPO_NAME: website-frontend-repo
      SERVICE_NAME: website-frontend
      VERSION: "1.0.0-$(date +%Y%m%d%H%M%S)"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: website

      # Ensure health check endpoint exists
      - name: Add/update health check endpoint
        run: |
          mkdir -p website/public
          
          # Create a more detailed health check file
          cat > website/public/health <<EOF
          {
            "status": "ok",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "version": "${{ env.VERSION }}",
            "checks": {
              "server": "ok"
            }
          }
          EOF
          
          # If using React, ensure the health check route is properly handled
          if [ -f "website/src/App.js" ]; then
            if ! grep -q "health" website/src/App.js; then
              echo "// Adding health check route handling in website build process"
              # Don't modify App.js directly as it might be complex
              # The static file in public/ will handle basic health checks
            fi
          fi
          
          # Add version information
          echo "REACT_APP_VERSION=${{ env.VERSION }}" > website/.env.local
          echo "Deployment version: ${{ env.VERSION }}"

      - name: Build website
        run: npm run build
        working-directory: website

      - name: Build Docker image
        run: |
          docker build --build-arg VERSION=${{ env.VERSION }} -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ./website

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      # Deploy with zero-downtime configuration
      - name: Deploy to Cloud Run
        run: |
          # Deploy new revision without traffic
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=256Mi \
            --cpu=1.0 \
            --port=80 \
            --min-instances=1 \
            --max-instances=5 \
            --concurrency=80 \
            --set-env-vars="VERSION=${{ env.VERSION }}" \
            --no-traffic

      # Check if the new revision is healthy before shifting traffic
      - name: Wait for new revision to be ready
        run: |
          # Get the latest revision
          LATEST_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.latestCreatedRevisionName)")
          echo "Latest revision: $LATEST_REVISION"
          
          # Wait for the revision to be ready
          echo "Waiting for revision to be ready..."
          for i in {1..30}; do
            STATUS=$(gcloud run revisions describe $LATEST_REVISION --region=${{ env.REGION }} --format="value(status.conditions[0].status)")
            if [[ "$STATUS" == "True" ]]; then
              echo "Revision is ready!"
              break
            fi
            echo "Waiting for revision to be ready... Attempt $i/30"
            sleep 10
          done
          
          if [[ "$STATUS" != "True" ]]; then
            echo "::error::Revision failed to become ready after 5 minutes"
            exit 1
          fi
          
          # Explicitly check health endpoint
          echo "Checking health endpoint..."
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
          HEALTH_URL="${SERVICE_URL}/health"
          
          # Use curl with the latest revision URL
          REVISION_URL="${SERVICE_URL}?revision=${LATEST_REVISION}"
          HEALTH_REVISION_URL="${REVISION_URL}/health"
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "${HEALTH_REVISION_URL}" || echo "failed")
          echo "Health endpoint response: $RESPONSE"
          
          if [[ "$RESPONSE" != "200" ]]; then
            echo "::error::Health check failed with response code: $RESPONSE"
            exit 1
          fi
          
          echo "Health check passed successfully!"

      # Gradually shift traffic to the new revision
      - name: Shift traffic to new revision
        run: |
          LATEST_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.latestCreatedRevisionName)")
          PREVIOUS_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.traffic[0].revisionName)")
          
          if [[ "$LATEST_REVISION" != "$PREVIOUS_REVISION" ]]; then
            echo "Beginning gradual traffic migration..."
            
            # First shift 20% traffic to the new revision
            echo "Shifting 20% traffic to new revision: $LATEST_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions="${LATEST_REVISION}=20,${PREVIOUS_REVISION}=80"
            
            # Wait to ensure stability
            sleep 20
            
            # Then shift 50% traffic
            echo "Shifting 50% traffic to new revision: $LATEST_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions="${LATEST_REVISION}=50,${PREVIOUS_REVISION}=50"
            
            # Wait to ensure stability
            sleep 20
            
            # Finally shift 100% traffic
            echo "Shifting 100% traffic to new revision: $LATEST_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions="${LATEST_REVISION}=100"
          else
            echo "Latest revision is the same as current revision. Skipping traffic migration."
          fi