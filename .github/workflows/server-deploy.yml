name: "Server CI"

on:
  push:
    paths:
      - 'server/**'
    branches: [ main ]
  workflow_dispatch:
    inputs:
      agent_path:
        description: 'Agent resource path (optional - will use latest agent if not provided)'
        required: false
        type: string
  workflow_run:
    workflows: [ "AI Consultant Agent" ]
    types:
      - completed

permissions:
  contents: read
  actions: read

jobs:
  # Process manual input when workflow is triggered manually
  process-manual-input:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.agent_path != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Create agent resource file from input
        run: |
          mkdir -p ./manual_agent_resource
          echo "${{ github.event.inputs.agent_path }}" > ./manual_agent_resource/agent_resource.txt
          echo "Using manually provided agent path: ${{ github.event.inputs.agent_path }}"

      # Upload as an artifact for the build-and-deploy job
      - name: Upload agent path as artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent_resource
          path: ./manual_agent_resource/agent_resource.txt
          retention-days: 1

  # This job only runs when triggered by the AI Consultant Agent workflow
  get-artifact-from-workflow:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from triggering workflow
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          run_id: ${{ github.event.workflow_run.id }}
          name: agent_resource
          path: ./agent_resources

      - name: Upload artifact for this workflow
        uses: actions/upload-artifact@v4
        with:
          name: agent_resource
          path: ./agent_resources/agent_resource.txt
          retention-days: 1

  # Find latest agent when no input or artifact is available
  find-latest-agent:
    if: |
      (github.event_name == 'push') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.agent_path == '')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install agent dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -d "agents/ai-consultant-agent" ]; then
            cd agents/ai-consultant-agent
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            fi
          fi
          pip install google-adk absl-py python-dotenv

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Find latest agent from Vertex AI
        env:
          PROJECT_ID: ${{ vars.PROJECT_ID }}
          REGION: us-central1
          GCP_BUCKET: ${{ vars.GCP_BUCKET }}
        run: |
          # Create the directory for the agent resource file
          mkdir -p ./latest_agent
          
          # Run the deploy.py with list option to get available agents
          if [ -f "agents/ai-consultant-agent/deployment/deploy.py" ]; then
            cd agents/ai-consultant-agent/deployment
            python deploy.py --list --project_id $PROJECT_ID --location us-central1 --bucket $GCP_BUCKET > agent_list.txt
          
            # Extract the first agent from the list
            LATEST_AGENT=$(grep -o "projects/[0-9]*/locations/[^/]*/reasoningEngines/[0-9]*" agent_list.txt | head -1)
          
            if [ -z "$LATEST_AGENT" ]; then
              echo "::error::No agents found in Vertex AI"
              exit 1
            fi
          
            echo "Found latest agent: $LATEST_AGENT"
          
            # Write to the correct path relative to the current directory
            echo "$LATEST_AGENT" > agent_resource.txt
          
            # Move the file to the root directory's latest_agent folder
            cd ../../..
            cp agents/ai-consultant-agent/deployment/agent_resource.txt ./latest_agent/
          else
            # If the deploy.py script is not available, use gcloud directly
            gcloud ai reasoners list --region=us-central1 --project=$PROJECT_ID > ./latest_agent/agent_list.txt
          
            # Extract the first agent from the list
            LATEST_AGENT=$(grep -o "projects/[0-9]*/locations/[^/]*/reasoningEngines/[0-9]*" ./latest_agent/agent_list.txt | head -1)
          
            if [ -z "$LATEST_AGENT" ]; then
              echo "::error::No agents found in Vertex AI"
              exit 1
            fi
          
            echo "Found latest agent: $LATEST_AGENT"
            echo "$LATEST_AGENT" > ./latest_agent/agent_resource.txt
          fi
          
          # Debug output
          cat ./latest_agent/agent_resource.txt

      - name: Upload latest agent path as artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent_resource
          path: ./latest_agent/agent_resource.txt
          retention-days: 1

  build-and-deploy:
    needs: [ get-artifact-from-workflow, process-manual-input, find-latest-agent ]
    if: |
      always() && 
      (
        (github.event_name == 'push' && needs.find-latest-agent.result == 'success') || 
        (github.event_name == 'workflow_dispatch' && 
          ((github.event.inputs.agent_path != '' && needs.process-manual-input.result == 'success') || 
           (github.event.inputs.agent_path == '' && needs.find-latest-agent.result == 'success'))
        ) || 
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && needs.get-artifact-from-workflow.result == 'success')
      )
    runs-on: ubuntu-latest
    environment: production
    env:
      PROJECT_ID: ai-consultant-458311
      REGION: asia-south1
      REPO_NAME: ai-consultant-backend-repo
      SERVICE_NAME: ai-consultant-backend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # Create directory for agent resource
      - name: Create directory for agent resource
        run: |
          mkdir -p ./server/agents/ai-consultant-agent/deployment

      # Download the artifact (works for all trigger types now)
      - name: Download agent resource artifact
        uses: actions/download-artifact@v4
        with:
          name: agent_resource
          path: ./server/agents/ai-consultant-agent/deployment

      # Log the agent resource content for debugging with improved visibility
      - name: Log agent resource
        run: |
          echo "=================================================="
          echo "DEPLOYING WITH AGENT RESOURCE:"
          cat ./server/agents/ai-consultant-agent/deployment/agent_resource.txt
          echo "=================================================="

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ./server

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Display agent information before deployment
        run: |
          echo "=============================================="
          echo "DEPLOYING SERVER WITH AGENT:"
          AGENT_PATH=$(cat ./server/agents/ai-consultant-agent/deployment/agent_resource.txt)
          echo $AGENT_PATH
          
          # Try to get more detailed information about the agent if possible
          if [ -n "$AGENT_PATH" ]; then
            echo "Attempting to fetch detailed agent info..."
            gcloud ai reasoners describe $AGENT_PATH --format="yaml" || echo "Unable to fetch detailed agent info"
          fi
          echo "=============================================="

      - name: Deploy to Cloud Run
        run: |
          AGENT_PATH=$(cat ./server/agents/ai-consultant-agent/deployment/agent_resource.txt)
          echo "Deploying with AGENT_ENGINE_ID=$AGENT_PATH"
          
          ENV_VARS=(
            "AGENT_ENGINE_ID=$AGENT_PATH"
            "GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}"
            "GOOGLE_CLIENT_SECRET=${{ vars.GOOGLE_CLIENT_SECRET }}"
            "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            "PROJECT_ID=${{ vars.PROJECT_ID }}"
            "GOOGLE_REDIRECT_URI=${{ vars.BAID_REDIRECT_URI }}"
            "ENABLE_WORD_BY_WORD_STREAMING=true"
          )
          ENV_VARS_STRING=$(IFS=,; echo "${ENV_VARS[*]}")
          
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=0.50 \
            --port=8080 \
            --set-env-vars="$ENV_VARS_STRING"

      # Create a completion signal artifact
      - name: Signal server deployment completion
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          echo "Server deployment completed at $(date)" > server_deployment_complete.txt

      # Upload the completion signal as an artifact
      - name: Upload completion signal
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/upload-artifact@v4
        with:
          name: server_deployment_complete
          path: server_deployment_complete.txt
          retention-days: 1