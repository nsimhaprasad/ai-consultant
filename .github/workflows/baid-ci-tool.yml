name: BAID-CI Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'baid-ci-v*'  # Trigger for any tag starting with baid-ci-v
    paths:
      - 'baid-ci/**'  # Trigger when files in baid-ci folder change
  pull_request:
    branches: [ main ]
    paths:
      - 'baid-ci/**'  # Trigger when files in baid-ci folder change
  workflow_dispatch:

env:
  GCS_BUCKET: "baid-ci-releases"  # Your bucket name with project ID
  GCP_PROJECT_ID: "ai-consultant-458311"  # Your project ID

jobs:
  build-package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        pip install -r baid-ci/requirements-dev.txt
    - name: Create packages
      working-directory: baid-ci
      run: |
        python -m build
    - name: Upload Python packages
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: baid-ci/dist/
        retention-days: 5

  build-linux-x86_64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r baid-ci/requirements.txt
        pip install nuitka ordered-set pytest-runner patchelf
    - name: Build executable
      working-directory: baid-ci
      run: |
        python scripts/build_executables.py linux-x86_64
    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: linux-x86_64-executable
        path: baid-ci/build/baid-ci-linux-x86_64
        retention-days: 5

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r baid-ci/requirements.txt
        pip install nuitka==2.7.1 ordered-set pytest-runner
        brew install ccache
    - name: Configure ccache environment
      run: |
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
        mkdir -p $HOME/.ccache
        ccache -M 500M
        ccache -o compression=true
    - name: Build executable
      working-directory: baid-ci
      run: |
        export PATH="/usr/local/opt/ccache/libexec:$PATH"
        python scripts/build_executables.py macos-x86_64
    - name: Upload macOS executable
      uses: actions/upload-artifact@v4
      with:
        name: macos-x86_64-executable
        path: baid-ci/build/baid-ci-macos-x86_64
        retention-days: 5

  generate-install-script:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Extract the tag version for use in the installer
    - name: Extract tag version
      id: get_version
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=latest" >> $GITHUB_OUTPUT
        fi

    # Generate the install script with the proper GCS URLs
    - name: Generate dynamic install script
      run: |
        mkdir -p dist
        
        # Set version and bucket name for the template
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        BUCKET_URL="https://storage.googleapis.com/${{ env.GCS_BUCKET }}"
        
        # Generate the installer script with the correct URLs
        cat << EOF > dist/install.sh
        #!/bin/bash
        # BAID-CI Installation Script - Auto-generated for version $VERSION
        set -e
        
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m' # No Color
        
        # Default installation directory
        INSTALL_DIR="/usr/local/bin"
        DEFAULT_VERSION="${VERSION}"
        VERSION="\$DEFAULT_VERSION"
        BUCKET_URL="${BUCKET_URL}"
        
        print_header() {
            echo -e "\${BLUE}============================================\${NC}"
            echo -e "\${BLUE}         BAID-CI Installation Tool         \${NC}"
            echo -e "\${BLUE}============================================\${NC}"
            echo
        }
        
        print_usage() {
            echo -e "Usage: \$0 [OPTIONS]"
            echo -e "Options:"
            echo -e "  -v, --version VERSION    Specify version to install (default: \$DEFAULT_VERSION)"
            echo -e "  -d, --dir DIRECTORY      Specify installation directory (default: /usr/local/bin)"
            echo -e "  -h, --help               Display this help message"
            echo
        }
        
        # Parse command line arguments
        while [[ \$# -gt 0 ]]; do
            case \$1 in
                -v|--version)
                    VERSION="\$2"
                    shift 2
                    ;;
                -d|--dir)
                    INSTALL_DIR="\$2"
                    shift 2
                    ;;
                -h|--help)
                    print_header
                    print_usage
                    exit 0
                    ;;
                *)
                    echo -e "\${RED}Error: Unknown option \$1\${NC}"
                    print_usage
                    exit 1
                    ;;
            esac
        done
        
        print_header
        
        # Determine OS and architecture
        OS="\$(uname -s | tr '[:upper:]' '[:lower:]')"
        ARCH="\$(uname -m)"
        
        case "\$OS" in
            linux)
                PLATFORM="linux"
                ;;
            darwin)
                PLATFORM="macos"
                ;;
            msys*|mingw*|cygwin*)
                PLATFORM="windows"
                ;;
            *)
                echo -e "\${RED}Error: Unsupported operating system: \$OS\${NC}"
                exit 1
                ;;
        esac
        
        # For macOS, use x86_64 on both Intel and Apple Silicon
        if [ "\$PLATFORM" = "macos" ]; then
            ARCHITECTURE="x86_64"
            if [ "\$ARCH" = "arm64" ]; then
                echo -e "\${YELLOW}Detected Apple Silicon (arm64).\${NC}"
                echo -e "\${YELLOW}Using x86_64 binary with Rosetta 2 translation.\${NC}"
            fi
        else
            case "\$ARCH" in
                x86_64|amd64)
                    ARCHITECTURE="x86_64"
                    ;;
                arm64|aarch64)
                    ARCHITECTURE="arm64"
                    ;;
                *)
                    echo -e "\${RED}Error: Unsupported architecture: \$ARCH\${NC}"
                    exit 1
                    ;;
            esac
        fi
        
        # Determine file extension
        if [ "\$PLATFORM" = "windows" ]; then
            EXT=".exe"
        else
            EXT=""
        fi
        
        echo -e "\${BLUE}Detected platform:\${NC} \$PLATFORM-\$ARCHITECTURE"
        
        # Construct the download URL
        FILENAME="baid-ci-\$PLATFORM-\$ARCHITECTURE\$EXT"
        DOWNLOAD_URL="\$BUCKET_URL/\$VERSION/\$FILENAME"
        
        echo -e "\${BLUE}Downloading BAID-CI (\$VERSION) for \$PLATFORM-\$ARCHITECTURE...\${NC}"
        echo -e "\${BLUE}Download URL: \$DOWNLOAD_URL\${NC}"
        
        # Create a temporary directory
        TMP_DIR=\$(mktemp -d)
        trap 'rm -rf "\$TMP_DIR"' EXIT
        
        # Download the binary
        if ! curl -L -o "\$TMP_DIR/\$FILENAME" "\$DOWNLOAD_URL"; then
            echo -e "\${RED}Error: Failed to download BAID-CI binary\${NC}"
            echo -e "\${RED}The requested binary may not be available for your platform.\${NC}"
            exit 1
        fi
        
        # Check if the file is very small (likely an error message)
        FILE_SIZE=\$(stat -f%z "\$TMP_DIR/\$FILENAME" 2>/dev/null || stat -c%s "\$TMP_DIR/\$FILENAME")
        if [ "\$FILE_SIZE" -lt 1000 ]; then  # Less than 1KB is suspicious
            echo -e "\${RED}Warning: Downloaded file is very small (\$FILE_SIZE bytes)\${NC}"
            echo -e "\${RED}Content of the downloaded file:\${NC}"
            cat "\$TMP_DIR/\$FILENAME"
            echo
            echo -e "\${RED}This doesn't look like a valid binary. Aborting installation.\${NC}"
            exit 1
        fi
        
        # Make the binary executable
        chmod +x "\$TMP_DIR/\$FILENAME"
        
        # Create installation directory if it doesn't exist
        if [ ! -d "\$INSTALL_DIR" ]; then
            echo -e "\${YELLOW}Creating installation directory: \$INSTALL_DIR\${NC}"
            if ! mkdir -p "\$INSTALL_DIR"; then
                echo -e "\${RED}Error: Failed to create installation directory\${NC}"
                echo -e "\${YELLOW}Try running with sudo:\${NC} sudo bash -c \"\$(curl -fsSL \$BUCKET_URL/\$VERSION/install.sh)\""
                exit 1
            fi
        fi
        
        # Install the binary
        echo -e "\${BLUE}Installing to \$INSTALL_DIR/baid-ci\$EXT...\${NC}"
        if ! mv "\$TMP_DIR/\$FILENAME" "\$INSTALL_DIR/baid-ci\$EXT"; then
            echo -e "\${RED}Error: Failed to install BAID-CI\${NC}"
            echo -e "\${YELLOW}Try running with sudo:\${NC} sudo bash -c \"\$(curl -fsSL \$BUCKET_URL/\$VERSION/install.sh)\""
            exit 1
        fi
        
        echo -e "\${GREEN}BAID-CI \$VERSION has been successfully installed!\${NC}"
        echo -e "\${GREEN}You can now run it with:\${NC} baid-ci"
        
        # Check if the installation directory is in PATH
        if [[ ":\$PATH:" != *":\$INSTALL_DIR:"* ]]; then
            echo -e "\${YELLOW}Warning: \$INSTALL_DIR is not in your PATH\${NC}"
            
            # Suggest appropriate command to add to PATH based on shell
            SHELL_NAME=\$(basename "\$SHELL")
            case "\$SHELL_NAME" in
                bash)
                    echo -e "Run this command to add it to your PATH:\${NC}"
                    echo -e "  echo 'export PATH=\"\$INSTALL_DIR:\\\$PATH\"' >> ~/.bashrc && source ~/.bashrc"
                    ;;
                zsh)
                    echo -e "Run this command to add it to your PATH:\${NC}"
                    echo -e "  echo 'export PATH=\"\$INSTALL_DIR:\\\$PATH\"' >> ~/.zshrc && source ~/.zshrc"
                    ;;
                *)
                    echo -e "Add \$INSTALL_DIR to your PATH to run baid-ci without specifying the full path."
                    ;;
            esac
        fi
        
        echo
        echo -e "\${BLUE}============================================\${NC}"
        echo -e "\${GREEN}Installation Complete!\${NC}"
        echo -e "\${BLUE}============================================\${NC}"
        EOF
        
        chmod +x dist/install.sh

    - name: Upload install script
      uses: actions/upload-artifact@v4
      with:
        name: install-script
        path: dist/install.sh
        retention-days: 5

  pypi-publish:
    needs: build-package
    # Only run for tags starting with baid-ci-v
    if: startsWith(github.ref, 'refs/tags/baid-ci-v')
    runs-on: ubuntu-latest
    steps:
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/baid-ci-v}" >> $GITHUB_OUTPUT
    - name: Download Python packages
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true

  upload-to-gcs:
    needs: [build-linux-x86_64, build-macos, generate-install-script]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Use the existing GCP_SA_KEY that's already working with your server deployment
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    # Set up gcloud CLI
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    # Download all artifacts
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: linux-x86_64-executable
        path: dist/

    - name: Download macOS executable
      uses: actions/download-artifact@v4
      with:
        name: macos-x86_64-executable
        path: dist/

    - name: Download install script
      uses: actions/download-artifact@v4
      with:
        name: install-script
        path: dist/

    # Make executables... executable
    - name: Make binaries executable
      run: |
        chmod +x dist/baid-ci-*
        chmod +x dist/install.sh

    # Determine version folder
    - name: Set version for storage
      id: version
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
        else
          VERSION="latest"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    # Upload to Google Cloud Storage
    - name: Upload to GCS
      run: |
        # Upload to version-specific folder
        echo "Uploading to ${{ steps.version.outputs.VERSION }} folder..."
        gsutil -m cp dist/baid-ci-linux-x86_64 gs://${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/
        gsutil -m cp dist/baid-ci-macos-x86_64 gs://${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/
        gsutil -m cp dist/install.sh gs://${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/
        
        # If this is a tag release, also update the 'latest' folder
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "Updating latest folder..."
          gsutil -m cp dist/baid-ci-linux-x86_64 gs://${{ env.GCS_BUCKET }}/latest/
          gsutil -m cp dist/baid-ci-macos-x86_64 gs://${{ env.GCS_BUCKET }}/latest/
          gsutil -m cp dist/install.sh gs://${{ env.GCS_BUCKET }}/latest/
        fi
        
        # Set content types for proper browser handling
        gsutil -m setmeta -h "Content-Type:application/octet-stream" gs://${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/baid-ci-*
        gsutil -m setmeta -h "Content-Type:text/plain" gs://${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/install.sh
        
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          gsutil -m setmeta -h "Content-Type:application/octet-stream" gs://${{ env.GCS_BUCKET }}/latest/baid-ci-*
          gsutil -m setmeta -h "Content-Type:text/plain" gs://${{ env.GCS_BUCKET }}/latest/install.sh
        fi
        
        # Make objects publicly readable
        gsutil -m acl ch -u AllUsers:R gs://${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/*
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          gsutil -m acl ch -u AllUsers:R gs://${{ env.GCS_BUCKET }}/latest/*
        fi
        
        # Print URLs for binaries and installer
        echo "✅ Files uploaded successfully!"
        echo "📦 Linux binary: https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/baid-ci-linux-x86_64"
        echo "📦 macOS binary: https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/baid-ci-macos-x86_64"
        echo "📜 Installer: https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/install.sh"
        
        echo "👉 Installation command:"
        echo "curl -fsSL https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ steps.version.outputs.VERSION }}/install.sh | bash"

  create-release:
    needs: [upload-to-gcs]
    # Only run for tags
    if: startsWith(github.ref, 'refs/tags/baid-ci-v')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/baid-ci-v}" >> $GITHUB_OUTPUT

    # Create GitHub release with links to GCS
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        name: BAID-CI v${{ steps.get_version.outputs.VERSION }}
        tag: ${{ github.ref_name }}
        body: |
          # BAID-CI v${{ steps.get_version.outputs.VERSION }}
          
          ## One-Command Installation
          
          ```bash
          curl -fsSL https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ github.ref_name }}/install.sh | bash
          ```
          
          ## Direct Download Links
          
          - Linux (x86_64): [baid-ci-linux-x86_64](https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ github.ref_name }}/baid-ci-linux-x86_64)
          - macOS (x86_64): [baid-ci-macos-x86_64](https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ github.ref_name }}/baid-ci-macos-x86_64)
          - Installation Script: [install.sh](https://storage.googleapis.com/${{ env.GCS_BUCKET }}/${{ github.ref_name }}/install.sh)
          
          ## Latest Version
          
          You can always install the latest version with:
          
          ```bash
          curl -fsSL https://storage.googleapis.com/${{ env.GCS_BUCKET }}/latest/install.sh | bash
          ```
        draft: false
        prerelease: false
        generateReleaseNotes: true